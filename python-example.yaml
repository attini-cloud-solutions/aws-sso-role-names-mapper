AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: >
  Distrubutes SSO PermissionSet role arn to all regions in SSM parameter store

Parameters:
  ParameterStorePrefix:
    Type: String
    Description: Prefix for the parameters in parameter store
    Default: /attini/aws-sso-role-names-mapper/

Resources:


  Trigger:
    Type: AWS::Events::Rule
    Properties:
      Description: Triggers on the creation of an SSO PermissionSet role
      EventPattern: |
        {
          "source": [
            "aws.iam"
          ],
          "detail-type": [
            "AWS API Call via CloudTrail"
          ],
          "detail": {
            "eventSource": [
              "iam.amazonaws.com"
            ],
            "userAgent": [
                "sso.amazonaws.com"
              ],
            "eventName": [
              "CreateRole",
              "DeleteRole"
            ]
          }
        }
      Targets:
        - Arn: !GetAtt DistributeSSORoleArns.Arn
          Id: DistributeSSORoleArns


  TriggerLambda:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt DistributeSSORoleArns.Arn
      Principal: events.amazonaws.com


  DistributeSSORoleArnsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub
        - /aws/lambda/${LambdaName}
        - { LambdaName: !Ref DistributeSSORoleArns }
      RetentionInDays: 90

  DistributeSSORoleArns:
    Type: AWS::Serverless::Function
    Properties:
      InlineCode: |
        import json
        import boto3
        import logging
        import traceback
        from botocore.exceptions import ClientError
        from botocore.config import Config

        config = Config(
            retries = {
                'max_attempts': 20,
                'mode': 'standard'
            }
        )

        logger = logging.getLogger()
        logger.setLevel(logging.INFO)

        ec2_client = boto3.client("ec2", config = config)

        def valid_event(event):
            if event["detail"]["requestParameters"]["roleName"].startswith("AWSReservedSSO"):
                return True
            else:
                return False


        def get_role(event):
            if event["detail"]["eventName"] == "CreateRole":
              return event["detail"]["responseElements"]["role"]["arn"]
            elif event["detail"]["eventName"] == "DeleteRole":
              return event["detail"]["requestParameters"]["roleName"]


        def get_permission_set_name(event):
            return event["detail"]["requestParameters"]["roleName"].split("_")[1]


        def lambda_handler(event, context):
            logger.info(f"Got event {json.dumps(event)}")

            if not valid_event(event):
                logger.error("Invalid event, please verify the cloudtrail filter")
                return "Failed"

            role = get_role(event)

            regions = ec2_client.describe_regions()
            permission_set_name = get_permission_set_name(event)
            paramter_name = f"/SSORoleArns/{permission_set_name}"

            for region in regions["Regions"]:
                try:
                    region_name = region["RegionName"]
                    ssm_client = boto3.client("ssm", region_name = region_name, config = config)
                    if event["detail"]["eventName"] == "CreateRole":
                        ssm_client.put_parameter(
                            Name = paramter_name,
                            Description = f"Role arn for AWS SSO PermissionSet {permission_set_name}",
                            Value = role,
                            Type = "String",
                            Overwrite = True,
                            Tier = "Standard"
                        )
                        logger.info(f"Saved name: {paramter_name}, value: {role}, region: {region_name}")
                    elif event["detail"]["eventName"] == "DeleteRole":
                        ssm_client.delete_parameter(
                            Name = paramter_name
                        )
                        logger.info(f"Deleted name: {paramter_name}, value: {role}, region: {region_name}")
                except Exception as e:
                  if event["detail"]["eventName"] == "CreateRole":
                    logger.error(f"Could not create the paramter in {region}")
                  elif event["detail"]["eventName"] == "DeleteRole":
                    logger.error(f"Could not delete the paramter in {region}")

                    logger.error(repr(e))
                    traceback.print_exc()

            return "Success"
      Description: This lambda will put SSO Permission set role arns into SSM Parameter stor in all avalibe regions
      Handler: index.lambda_handler
      MemorySize: 128
      Runtime: python3.8
      Timeout: 900
      Environment:
        Variables:
          ParameterStorePrefix: !Ref ParameterStorePrefix
      Policies:
        Statement:
          - Effect: Allow
            Action:
              - ssm:PutParameter
              - ssm:DeleteParameter
            Resource: !Sub arn:aws:ssm:*:${AWS::AccountId}:parameter/ParameterStorePrefix/*
          - Effect: Allow
            Action:
              - ssm:GetParametersByPath
            Resource: !Sub arn:aws:ssm:*:${AWS::AccountId}:/aws/service/global-infrastructure/regions